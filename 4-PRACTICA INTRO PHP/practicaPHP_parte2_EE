EJERCICIO 1

Sí, los códigos son equivalentes en términos de resultados finales. Ambos códigos crean un array asociativo en PHP con las mismas claves y valores. Las diferencias son principalmente sintácticas.

En el primer código, se utiliza la función array() para inicializar un array asociativo con las claves y valores especificados.

En el segundo código, se inicializa un array asociativo vacío $ay luego se asignan los valores a las claves utilizando la notación de corchetes.

La única diferencia significativa es que en el segundo código, se utiliza $a[] = 4; para agregar el valor 4 al final del array sin una clave específica. Esto es equivalente a agregarlo al array en la posición numérica siguiente disponible. En el primer código, esto se hace de manera implícita al no proporcionar una clave después de la coma en la última entrada.

En resumen, ambos códigos producirán el mismo resultado final: un array asociativo con las mismas claves y valores. La elección entre uno u otro depende de la preferencia del programador en cuanto a la sintaxis.


Ejercicio 2:
En cada caso, indicar las salidas correspondientes:
a-
<?php
$matriz = array("x" => "bar", 12 => true);
echo $matriz["x"];
echo $matriz[12];
?>
//print:    bar 
            true

b- 
<?php
$matriz = array("unamatriz" => array(6 => 5, 13 => 9, "a" => 42));
echo $matriz["unamatriz"][6];
echo $matriz["unamatriz"][13];
echo $matriz["unamatriz"]["a"];
?>
//print:    5
            9
            42

c- 
<?php
$matriz = array(5 => 1, 12 => 2);
$matriz[] = 56;
$matriz["x"] = 42; unset($matriz[5]); unset($matriz);
?>
// le asigna a la matriz dimension = 56 
    le asigna como valor 42 a la posicion correspondiente a la clave "x" de "matriz"; la variable que se encuentra con la clave 5 en el arreglo multidimensional "matriz" ya esta definida; luego el arreglo multidimensional "matriz" se encuentra indefinida.

Ejercicio 3:
En cada caso, indicar las salidas correspondientes:
a- 
<?php
$fun = getdate();
echo "Has entrado en esta pagina a las $fun[hours] horas, con $fun[minutes] minutos y $fun[seconds]
segundos, del $fun[mday]/$fun[mon]/$fun[year]";
?>
//print: Has encontrado esra pagina a las <por clave horas de 0 a 23 que obtuvo de fun> horas, con <por clave minutes de 0 a 59 que obtuvo de fun> minutos y <por clave seconds de 0 a 59 que obtuvo de fun> segundos, del <por clave mday de 1 a 31 que obtuvo de fun> / <por clave mon de 1 a 3121 que obtuvo de fun> / <por clave year de 4 digitos que obtuvo de fun>
    Entendemos entonces que por la funcion getdate() obtenemos un valor array asociativo que contiene información de fecha completo para poder llamar por clave y obtener los distintos valores que la componen.

b- 
<?php
function sumar($sumando1,$sumando2){
 $suma=$sumando1+$sumando2;
 echo $sumando1."+".$sumando2."=".$suma;
}
sumar(5,6);
?>
//print: <valor asignado a la variable "sumando1"> + <valor asignado a la variable "sumando2"> = <valor asignado a la variable "suma" que se obtuvo como reesultado de una funcion que utiliza un operador unario entre dos variables>
    Entendemos que se llamo a la funcion sumar con sus parametros correspondientes pasados por valor, donde a una variable suma se le atribuye el resultado obtenido por la suma de los parametros traidos a traves de un operador unario (+) y luego se mostraron las dos variables que utilizo la funcion suma como parametros con un signo + en medio y con un = el valor de la variable contenida en suma.

Ejercicio 4:
Analizar la siguiente función, y escribir un script para probar su funcionamiento:

<?php
function comprobar_nombre_usuario($nombre_usuario){
//compruebo que el tamaño del string sea válido.
 if (strlen($nombre_usuario)<3 || strlen($nombre_usuario)>20){
 echo $nombre_usuario . " no es válido<br>";
 return false;
 }

 //compruebo que los caracteres sean los permitidos
 $permitidos = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-
_";
 for ($i=0; $i<strlen($nombre_usuario); $i++){
 if (strpos($permitidos, substr($nombre_usuario,$i,1))===false){
 echo $nombre_usuario . " no es válido<br>";
 return false;
 }
 }
 echo $nombre_usuario . " es válido<br>";
 return true;
} 
// Pruebas
$usuarios_validos = ["usuario123", "nombre-usuario", "mi_usuario"];
$usuarios_invalidos = ["us", "usuario@", "usuario*!"];

echo "<h2>Usuarios Válidos:</h2>";
foreach ($usuarios_validos as $usuario) {
    comprobar_nombre_usuario($usuario);
}

echo "<h2>Usuarios Inválidos:</h2>";
foreach ($usuarios_invalidos as $usuario) {
    comprobar_nombre_usuario($usuario);
}
?>
